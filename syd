%{
 
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

void yyerror(char *s);

#define DEBUG 0

/* ----------------------------------------------------------- */
/* --------- Declarations for Syntax-Semantic Analysis ------- */
/* ----------------------------------------------------------- */
int yyparse();
int yylex();

%}

%union
{
    int   yint;
    char  ystr[81];
    int   nonterm;
}

%token <yint> RETURN BREAK ELSE IF INT WHILE TRUE FALSE
%token <ystr> '(' ')' '{' '}' ',' ';'
%token <ystr> '*' '/' '%' '+' '-' '='
%token <yint> GT LT GE LE EQ NE
%token <ystr> ID NUM
 
%type <nonterm> PROGRAM METH_LIST METH PARAMS FORMALS TYPE BODY DECLS DECL_LIST DECL VARS
%type <nonterm> STMTS STMT BLOCK ASSIGN LOCATION METHOD EXPR RELOP ADD_EXPR ADDOP TERM
%type <nonterm> MULOP FACTOR ACTUALS ARGS

%start PROGRAM

%%

PROGRAM            : METH_LIST
                     { 
#if DEBUG
                        printf("Rule #1\n");
#endif 
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #2\n");
#endif
                     };
METH_LIST            : METH METH_LIST
                     { 
#if DEBUG
                        printf("Rule #3\n");
#endif 
                     }
		       | METH
                     { 
#if DEBUG
                        printf("Rule #4\n");
#endif
                     };
METH            : TYPE ID '(' PARAMS ')' BODY
                     { 
#if DEBUG
                        printf("Rule #5\n");
#endif
                     };
PARAMS            : FORMALS TYPE ID
                     { 
#if DEBUG
                        printf("Rule #6\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #7\n");
#endif
                     };
FORMALS            : FORMALS TYPE ID ','
                     { 
#if DEBUG
                        printf("Rule #8\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #9\n");
#endif
                     };
TYPE            : INT
                     { 
#if DEBUG
                        printf("Rule #10\n");
#endif
                     };
BODY            : '{' DECLS STMTS '}'
                     { 
#if DEBUG
                        printf("Rule 11\n");
#endif
                     };
DECLS            : DECL_LIST DECL
                     { 
#if DEBUG
                        printf("Rule #12\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #13\n");
#endif
                     };
DECL_LIST            : DECL_LIST DECL
                     { 
#if DEBUG
                        printf("Rule #14\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #15\n");
#endif
                     };
DECL            : TYPE ID VARS ';'
                     { 
#if DEBUG
                        printf("Rule #16\n");
#endif
                     }
		       | TYPE ID '=' EXPR VARS ';' 
                     { 
#if DEBUG
                        printf("Rule #17\n");
#endif
                     };
VARS            : ',' ID VARS
                     { 
#if DEBUG
                        printf("Rule #18\n");
#endif
                     }
		       | ',' ID '=' EXPR VARS
                     { 
#if DEBUG
                        printf("Rule #19\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #20\n");
#endif
                     };
STMTS            : STMTS STMT
                     { 
#if DEBUG
                        printf("Rule #21\n");
#endif
                     }
		       | 
                     { 
#if DEBUG
                        printf("Rule #22\n");
#endif
                     };
STMT            : ASSIGN ';'
                     { 
#if DEBUG
                        printf("Rule #23\n");
#endif
                     }
		       | RETURN EXPR ';'
		{ 
#if DEBUG
                        printf("Rule #24\n");
#endif
                     }
			| IF '(' EXPR ')' STMT ELSE STMT
		{ 
#if DEBUG
                        printf("Rule #25\n");
#endif
                     }
			| WHILE '(' EXPR ')' STMT
		{ 
#if DEBUG
                        printf("Rule #26\n");
#endif
                     }
			| BREAK ';'
		{ 
#if DEBUG
                        printf("Rule #27\n");
#endif
                     }
			| BLOCK
		{ 
#if DEBUG
                        printf("Rule #28\n");
#endif
                     }
		       | ';'
                     { 
#if DEBUG
                        printf("Rule #29\n");
#endif
                     };
BLOCK            : '{' STMTS '}'
                     { 
#if DEBUG
                        printf("Rule #30\n");
#endif
                     };
ASSIGN            : LOCATION '=' EXPR
                     { 
#if DEBUG
                        printf("Rule #31\n");
#endif
                     };
LOCATION            : ID
                     { 
#if DEBUG
                        printf("Rule #32\n");
#endif
                     };
METHOD            : ID
                     { 
#if DEBUG
                        printf("Rule #33\n");
#endif
                     };
EXPR            : ADD_EXPR RELOP ADD_EXPR
                     { 
#if DEBUG
                        printf("Rule #34\n");
#endif
                     }
		| ADD_EXPR
                     { 
#if DEBUG
                        printf("Rule #35\n");
#endif
                     };
RELOP            : LE
                     { 
#if DEBUG
                        printf("Rule #36\n");
#endif
                     }
		| LT
                     { 
#if DEBUG
                        printf("Rule #37\n");
#endif
                     }
		| GT
                     { 
#if DEBUG
                        printf("Rule #38\n");
#endif
                     }
		| GE
                     { 
#if DEBUG
                        printf("Rule #39\n");
#endif
                     }
		| EQ
                     { 
#if DEBUG
                        printf("Rule #40\n");
#endif
                     }
		| NE
                     { 
#if DEBUG
                        printf("Rule #41\n");
#endif
                     };
ADD_EXPR            : ADD_EXPR ADDOP TERM
                     { 
#if DEBUG
                        printf("Rule #42\n");
#endif
                     }
		| TERM
                     { 
#if DEBUG
                        printf("Rule #43\n");
#endif
                     };
ADDOP            : '+'
                     { 
#if DEBUG
                        printf("Rule #44\n");
#endif
                     }
		| '-'
                     { 
#if DEBUG
                        printf("Rule #45\n");
#endif
                     };
TERM            : TERM MULOP FACTOR
                     { 
#if DEBUG
                        printf("Rule #46\n");
#endif
                     }
		| FACTOR
                     { 
#if DEBUG
                        printf("Rule #47\n");
#endif
                     };
MULOP            : '*'
                     { 
#if DEBUG
                        printf("Rule #48\n");
#endif
                     }
		| '/'
                     { 
#if DEBUG
                        printf("Rule #49\n");
#endif
                     };
FACTOR            : '(' EXPR ')'
                     { 
#if DEBUG
                        printf("Rule #50\n");
#endif
                     }
		| LOCATION
                     { 
#if DEBUG
                        printf("Rule #51\n");
#endif
                     }
		| NUM
                     { 
#if DEBUG
                        printf("Rule #52\n");
#endif
                     }
		| TRUE
                     { 
#if DEBUG
                        printf("Rule #53\n");
#endif
                     }
		| FALSE
                     { 
#if DEBUG
                        printf("Rule #54\n");
#endif
                     }
		| METHOD '(' ACTUALS ')'
                     { 
#if DEBUG
                        printf("Rule #55\n");
#endif
                     };
ACTUALS            : ARGS EXPR
                     { 
#if DEBUG
                        printf("Rule #56\n");
#endif
                     }
		|
                     { 
#if DEBUG
                        printf("Rule #57\n");
#endif
                     };
ARGS            : ARGS EXPR ','
                     { 
#if DEBUG
                        printf("Rule #58\n");
#endif
                     }
		|
                     { 
#if DEBUG
                        printf("Rule #59\n");
#endif
                     };
%%

void yyerror(char *s)
{
   fputs(s,stderr); putc('\n',stderr);
}

int main(void)
{
   yyparse();
}
